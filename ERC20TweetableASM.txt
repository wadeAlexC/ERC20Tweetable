object "ERC20Tweetable" {
    code {
        /**
         * Target memory layout:
         * 0x00: [param 0]
         * 0x20: [caller]
         * 0x40: [param 0]
         * 0x60: [param 1]
         * 0x80: [param 2]
         */

        // Copy p0, p1, p2 to mem[0x00:0x60)
        calldatacopy(0, 4, calldatasize())

        // Place caller at 0x20
        mstore(0x20, caller())

        // Copy p0, p1, p2 to mem[0x40:0xA0)
        calldatacopy(0x40, 4, calldatasize())

        // Get first byte of selector
        let func := byte(0, calldataload(0))

        /**
         * These two values are used 3 times each in the following code,
         * so it's more efficient to put them on the stack now and spend
         * a DUP instruction for each reference below.
         * shaP0: hash of param 0
         * p1: param 1
         */
        let shaP0 := keccak256(0x00, 32)
        let p1 := mload(0x60)

        /**
         * Check whether func is any of the state-changing methods:
         *
         * transfer(dest, amt)
         * transferFrom(from, dest, amt)
         * approve(dest, amt)
         * 
         * Only check the first byte, since they're all unique
         */

        // 1 if func is transfer; 0 otherwise
        let isTransfer := eq(func, 0xA9)
        // 1 if func is transferFrom; 0 otherwise
        let isTransferFrom := eq(func, 0x23)
        // 1 if func is approve; 0 otherwise
        let isApprove := eq(func, 0x09)

        /**
         * Handle view functions:
         * token.balanceOf(owner)
         * token.allowance(owner, spender)
         * token.totalSupply()
         */

        /**
         * Calc readSlot:
         * allowance: sha(p0, p1)
         * balanceOf: sha(p0)
         * totalSupply: 3
         * other methods: 0
         */
        let readSlot := or(
            mul(3, eq(func, 0x18)), // isTotalSupply := eq(func, 0x18)
            or(
                mul(keccak256(0x40, 64), eq(func, 0xDD)), // isAllowance := eq(func, 0xDD)
                mul(shaP0, eq(func, 0x70)) // isBalanceOf := eq(func, 0x70)
            )
        )

        /**
         * Set transferAmt:
         * transfer: p1
         * transferFrom: p2
         * approve: 0
         */
        let transferAmt := or(
            mul(p1, isTransfer),
            mul(mload(0x80), isTransferFrom)
        )

        /**
         * Set approvalSlot:
         * transfer: slot_max
         * transferFrom: sha(p0, caller)
         * approve: sha(caller, p0)
         */
        let approvalSlot := or(
            mul(4, isTransfer),
            or(
                mul(keccak256(0x00, 64), isTransferFrom),
                mul(keccak256(0x20, 64), isApprove)
            )
        )

        /**
         * Set approvalAmt:
         * transfer: sload(approvalSlot)
         * transferFrom: sload(approvalSlot) - transferAmt
         * approve: p1
         */
        let approvalAmt := or(
            mul(sload(approvalSlot), isTransfer),
            or(
                mul(sub(sload(approvalSlot), transferAmt), isTransferFrom),
                mul(p1, isApprove)
            )
        )

        /**
         * Set fromBalSlot:
         * transfer: sha(caller)
         * transferFrom: sha(p0)
         * approve: 0
         */
        let fromBalSlot := or(
            mul(keccak256(0x20, 32), isTransfer),
            mul(shaP0, isTransferFrom)
        )

        /**
         * Set toBalSlot:
         * transfer: sha(p0)
         * transferFrom: sha(p1)
         * approve: 0
         */
        let toBalSlot := or(
            mul(shaP0, isTransfer),
            mul(keccak256(0x60, 32), isTransferFrom)
        )

        /**
         * Set eventSigSlot:
         * transfer: 1
         * transferFrom: 1
         * approve: 0
         */
        let eventSigSlot := or(isTransfer, isTransferFrom)

        /**
         * Set logAmtPtr:
         * transfer: p1
         * transferFrom: p2
         * approve: p1
         */
        let logAmtPtr := or(
            mul(0x60, or(isTransfer, isApprove)),
            mul(0x80, isTransferFrom)
        )

        /**
         * Set logFromParam:
         * transfer: caller
         * transferFrom: p0
         * approve: caller
         */
        let logFromParam := or(
            mul(caller(), or(isTransfer, isApprove)),
            mul(mload(0x00), isTransferFrom)
        )

        /**
         * Set logToParam:
         * transfer: p0
         * transferFrom: p1
         * approve: p0
         */
        let logToParam := or(
            mul(mload(0x00), or(isTransfer, isApprove)),
            mul(p1, isTransferFrom)
        )

        // Check balance/allowance requirements
        if or(
            lt(sload(approvalSlot), transferAmt), 
            lt(sload(fromBalSlot), transferAmt)
        ) {
            revert(0, 0)
        }

        /**
         * If we didn't call a view function, do sstores/log
         */
        if iszero(readSlot) {
            sstore(fromBalSlot, sub(sload(fromBalSlot), transferAmt)) // Update from balance
            sstore(toBalSlot, add(sload(toBalSlot), transferAmt)) // Update to balance
            sstore(approvalSlot, approvalAmt) // Update allowance

            // Log Transfer or Approval events
            log3(logAmtPtr, 32, sload(eventSigSlot), logFromParam, logToParam)

            // Set readSlot to 2 to return "true"
            readSlot := 2
        }

        // Load return value from storage and return
        mstore(0, sload(readSlot))
        return(0, 32)
    }
}
